version: '3.8'

# Docker Compose for VPS deployment with existing n8n
# This configuration assumes n8n is already running and connected to shared network

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sch-kpru-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sch_kpru_prod}
      POSTGRES_USER: ${POSTGRES_USER:-sch_kpru_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - sch-kpru-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sch_kpru_user} -d ${POSTGRES_DB:-sch_kpru_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API from Registry
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/hamhapichai/sch-kpru/backend:latest}
    container_name: sch-kpru-backend-prod
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=${POSTGRES_DB:-sch_kpru_prod};Username=${POSTGRES_USER:-sch_kpru_user};Password=${POSTGRES_PASSWORD}
      Jwt__Key: ${JWT_SECRET}
      Jwt__Issuer: ${JWT_ISSUER:-SCH-KPRU}
      Jwt__Audience: ${JWT_AUDIENCE:-SCH-KPRU-Users}
      # N8n integration - connect to existing n8n container
      WebhookOptions__N8nBaseUrl: ${N8N_BASE_URL:-http://n8n:5678}
      WebhookOptions__AISuggestionCallbackUrl: /webhook/complaints/ai-suggestion
      # Additional settings
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sch-kpru-network
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend from Registry
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/hamhapichai/sch-kpru/frontend:latest}
    container_name: sch-kpru-frontend-prod
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_ENV: production
      # Add any additional frontend environment variables
      PORT: 3000
    networks:
      - sch-kpru-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sch-kpru-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - sch-kpru-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Watchtower for automatic updates (use with caution in production)
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: sch-kpru-watchtower
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=3600
  #     - WATCHTOWER_INCLUDE_STOPPED=true
  #   networks:
  #     - sch-kpru-network

networks:
  sch-kpru-network:
    external: true

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local