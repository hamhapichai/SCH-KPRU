// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchKpruApi.Data;

#nullable disable

namespace SchKpruApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchKpruApi.Models.AISuggestion", b =>
                {
                    b.Property<int>("AISuggestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ai_suggestion_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AISuggestionId"));

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer")
                        .HasColumnName("complaint_id");

                    b.Property<float?>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real")
                        .HasColumnName("confidence_score");

                    b.Property<string>("N8nWorkflowId")
                        .HasColumnType("text")
                        .HasColumnName("n8n_workflow_id");

                    b.Property<DateTime>("SuggestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suggested_at");

                    b.Property<string>("SuggestedCategory")
                        .HasColumnType("text")
                        .HasColumnName("suggested_category");

                    b.Property<int?>("SuggestedDeptId")
                        .HasColumnType("integer")
                        .HasColumnName("suggested_dept_id");

                    b.Property<string>("SummarizedByAI")
                        .HasColumnType("text")
                        .HasColumnName("summarized_by_ai");

                    b.HasKey("AISuggestionId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("SuggestedDeptId");

                    b.ToTable("ai_suggestions");
                });

            modelBuilder.Entity("SchKpruApi.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("complaint_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_status");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_date");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("ComplaintId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("complaints");
                });

            modelBuilder.Entity("SchKpruApi.Models.ComplaintAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("assignment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_by_user_id");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date");

                    b.Property<int?>("AssignedToDeptId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_to_dept_id");

                    b.Property<int?>("AssignedToGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_to_group_id");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_to_user_id");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_date");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer")
                        .HasColumnName("complaint_id");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("TargetDate")
                        .HasColumnType("integer")
                        .HasColumnName("target_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToDeptId");

                    b.HasIndex("AssignedToGroupId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("complaint_assignments");
                });

            modelBuilder.Entity("SchKpruApi.Models.ComplaintLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("integer")
                        .HasColumnName("complaint_id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("NewStatus")
                        .HasColumnType("text")
                        .HasColumnName("new_status");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PreviousStatus")
                        .HasColumnType("text")
                        .HasColumnName("previous_status");

                    b.Property<int?>("RelatedAssignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("related_assignment_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RelatedAssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("complaint_logs");
                });

            modelBuilder.Entity("SchKpruApi.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsAdminOrDeanDept")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin_or_dean_dept");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SchKpruApi.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("SchKpruApi.Models.Member", b =>
                {
                    b.Property<int>("MembersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("members_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MembersId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MembersId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("SchKpruApi.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("SchKpruApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("SchKpruApi.Models.AISuggestion", b =>
                {
                    b.HasOne("SchKpruApi.Models.Complaint", "Complaint")
                        .WithMany("AISuggestions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.Department", "SuggestedDepartment")
                        .WithMany("AISuggestions")
                        .HasForeignKey("SuggestedDeptId");

                    b.Navigation("Complaint");

                    b.Navigation("SuggestedDepartment");
                });

            modelBuilder.Entity("SchKpruApi.Models.Complaint", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedComplaints")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("SchKpruApi.Models.ComplaintAssignment", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "AssignedByUser")
                        .WithMany("AssignedByComplaintAssignments")
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.Department", "AssignedToDepartment")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("AssignedToDeptId");

                    b.HasOne("SchKpruApi.Models.Group", "AssignedToGroup")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("AssignedToGroupId");

                    b.HasOne("SchKpruApi.Models.User", "AssignedToUser")
                        .WithMany("AssignedToComplaintAssignments")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.Complaint", "Complaint")
                        .WithMany("ComplaintAssignments")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedComplaintAssignments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToDepartment");

                    b.Navigation("AssignedToGroup");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Complaint");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("SchKpruApi.Models.ComplaintLog", b =>
                {
                    b.HasOne("SchKpruApi.Models.Complaint", "Complaint")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.User", "CreatedByUser")
                        .WithMany("CreatedComplaintLogs")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.Department", "Department")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchKpruApi.Models.ComplaintAssignment", "RelatedAssignment")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("RelatedAssignmentId");

                    b.HasOne("SchKpruApi.Models.User", "User")
                        .WithMany("ComplaintLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Complaint");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("RelatedAssignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchKpruApi.Models.Department", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "CreatedByUser")
                        .WithMany("CreatedDepartments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedDepartments")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("SchKpruApi.Models.Group", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "CreatedByUser")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedGroups")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("SchKpruApi.Models.Member", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "CreatedByUser")
                        .WithMany("CreatedMembers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchKpruApi.Models.User", b =>
                {
                    b.HasOne("SchKpruApi.Models.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchKpruApi.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchKpruApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchKpruApi.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("SchKpruApi.Models.Complaint", b =>
                {
                    b.Navigation("AISuggestions");

                    b.Navigation("ComplaintAssignments");

                    b.Navigation("ComplaintLogs");
                });

            modelBuilder.Entity("SchKpruApi.Models.ComplaintAssignment", b =>
                {
                    b.Navigation("ComplaintLogs");
                });

            modelBuilder.Entity("SchKpruApi.Models.Department", b =>
                {
                    b.Navigation("AISuggestions");

                    b.Navigation("ComplaintAssignments");

                    b.Navigation("ComplaintLogs");

                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchKpruApi.Models.Group", b =>
                {
                    b.Navigation("ComplaintAssignments");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SchKpruApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchKpruApi.Models.User", b =>
                {
                    b.Navigation("AssignedByComplaintAssignments");

                    b.Navigation("AssignedToComplaintAssignments");

                    b.Navigation("ComplaintLogs");

                    b.Navigation("CreatedComplaintLogs");

                    b.Navigation("CreatedDepartments");

                    b.Navigation("CreatedGroups");

                    b.Navigation("CreatedMembers");

                    b.Navigation("CreatedUsers");

                    b.Navigation("Members");

                    b.Navigation("UpdatedComplaintAssignments");

                    b.Navigation("UpdatedComplaints");

                    b.Navigation("UpdatedDepartments");

                    b.Navigation("UpdatedGroups");

                    b.Navigation("UpdatedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
