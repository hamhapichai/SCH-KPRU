name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Navigate to project directory
          cd ${{ secrets.PROJECT_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          
          # Update docker-compose to use registry images
          export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          
          # Create shared network if not exists
          docker network create sch-kpru-network || true
          
          # Deploy with zero downtime using VPS-specific compose file
          docker-compose -f docker-compose.vps.yml up -d --no-build
          
          # Clean up old images
          docker system prune -f
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Check if services are running
          docker-compose -f docker-compose.vps.yml ps
        EOF
    
    - name: Health Check
      run: |
        # Wait a bit for services to fully start
        sleep 60
        
        # Check if the application is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Deployment successful! Application is healthy."
        else
          echo "❌ Deployment failed! Health check returned: $response"
          exit 1
        fi
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🚀 Deployment to production completed successfully!"
          echo "Application URL: ${{ secrets.PRODUCTION_URL }}"
        else
          echo "💥 Deployment failed!"
        fi
  
  # ==========================================
  # Database Migration (if needed)
  # ==========================================
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Run migrations
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ${{ secrets.PROJECT_PATH }}
          
          # Run Entity Framework migrations
          docker exec sch-kpru-backend-prod dotnet ef database update
          
          echo "✅ Database migrations completed"
        EOF
  
  # ==========================================
  # Backup Database
  # ==========================================
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: migrate
    if: success()
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create database backup
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ${{ secrets.PROJECT_PATH }}
          
          # Create backup
          make db-backup
          
          echo "✅ Database backup completed"
        EOF